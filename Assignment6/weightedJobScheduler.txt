Michael Thompson
MJT106
10/8/2019


*Get Max Value Index* this is protected
-Input: the value list from @*Weighted Job Scheduling*
-Output: the index of the maximum value within the value list
This routine goes through the value list and returns the index of the maximum value
{
	maximum value -> value list at the first index
	maximum value index -> index of the first item

	for all items V in the values list
	{
		if V is greater than maximum value
		{
			maximum value -> V
			maximum value index -> V's index
		}
	}

	return maximum value index
}


*Get Weighted Schedule* this is protected
-Input: the focus list from @*Weighted Job Scehduling*
		the maximum value index
-Output: a list containing the best schedule
This routine takes the focus list and backwards traverses it to construct the best
schedule to follow
{
	make a stack of items (a list that is first in last out) to traverse the linked list

	max value index -> *Get Max Value Index*

	add the max value index of the focus list to the stack

	set the Max Value Index of the focus list to P
	while the *Get Linked Object* of P does not return a null
	{
		set P to *Get Linked Object*
		add P to the stack
	}
	
	return the list of items by removing each item from the stack
}


*Weighted Job Scheduling*
-Input: a priority queue (a queue sorted by some method) provided to it
-Output: a list that contains the most valuable schedule from the priority queue
**The items that the priority queue is comprised of must implement the routines in the 
  weighted job schedulable description in order for this routine to function properly
{
	take the priority queue and put it into a list of the items, we'll call that list
	the focus list

	make another list the same size as the focus list and fill it with the value's of each
	item using the *Get Value* routine, we'll call that list the value list

	for each item I in the focus list starting from the 2nd spot
	{
		for each item J starting from spot 1 (inclusive) in the focus list until item I (non inclusive)
		{
			if item I does not overlap item J 
			and if Value List at I spot + Value List at J spot is greater than Value List at I spot
			{
				value list at spot I -> I *Get Value* + J *Get Value*

				Item I *Link Object* to J
			}
		}
	}
	
	return the result of *Get Weighted Schedule*
}
