Michael Thompson
MJT106
10/8/2019

This is the pseudo code outline of the weighted job scheduler routines


*Link Best Option* this is protected
-Input: the value list from @*Weighted Job Scheduling*
		the focus list from @*Weighted Job Scheduling*
		the ending index
This routine finds the best value option that occurs before index and links it to 
the item in the focus list at the index
Both the value list and the focus list need to be pass by reference so they can be 
manipulated within this routine
{
	for each item J starting from spot 1 (inclusive) in the focus list until the 
	index (non inclusive)
	{
		if focus list at ending index does not overlap item J 
		and if focus list value at ending index spot + Value List at J spot is greater 
		than Value List at ending index spot
		{
			value list at spot ending index -> focus list at ending index *Get Value* + value list at J

			focus list at ending index *Link Object* to J
		}
	}
}


*Generate Max Value Index* this is protected
-Input: the value list from @*Weighted Job Scheduling*
-Output: the index of the maximum value within the value list
This routine goes through the value list and returns the index of the maximum value
{
	maximum value -> value list at the first index
	maximum value index -> index of the first item

	for all items V in the values list
	{
		if V is greater than maximum value
		{
			maximum value -> V
			maximum value index -> V's index
		}
	}

	return maximum value index
}


*Generate Weighted Schedule* this is protected
-Input: the focus list from @*Weighted Job Scehduling*
		the maximum value index
-Output: a list containing the best schedule
This routine takes the focus list and backwards traverses it to construct the best
schedule to follow
{
	create a list of items

	set the Max Value Index of the focus list to P

	add p to the list

	while the *Get Linked Object* of P does not return a null
	{
		set P to *Get Linked Object*
		add P to the stack
	}
	
	return the list but reversed
}


*Weighted Job Scheduling*
-Input: a sorted set (a set sorted by some method) provided to it
-Output: a list that contains the most valuable schedule from the sorted set
**The items that the sorted set is comprised of must implement the routines in the 
  weighted job schedulable description in order for this routine to function properly
{
	ensure parameters are not null

	take the sorted set and put it into a list of the items, we'll call that list
	the focus list

	make another list the same size as the focus list and fill it with the value's of each
	item using the *Get Value* routine, we'll call that list the value list

	for each item I in the focus list starting from the 2nd spot
	{
		*Link Best Option* value list, focus list, index of I
	}
	
	return the result of *Get Weighted Schedule*
}
