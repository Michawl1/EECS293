Michael Thompson
MJT106
10/8/2019

This is the pseudo code outline of the Photo Schedule class

photo schedule will have 3 variables to keep track of, all of which will be protected data:
~a sorted set containing Photo Times
	(a sorted set is a list of items that is ordered in accordance with some 
	value routine, an object with a higher value gets placed before an object with
	a lower value.  These value functions are described within the object that a 
	queue contains.  Any new object that is added into the sorted set will 
	automatically be sorted into it's correct position in accordance with said 
	value function)
~a value to store the Start Time for the best lighting
~a value to store the End Time for the best lighting


*There will be a constructor that will be protected
-Input: a sorted set
		a value for start time
		a value for end time
This routine is meant to initialize all the variables within this Photo Schedule
{
	ensure that the starting time occurs before the ending time
	(if they don't throw an error)

	set this's priority to an empty sorted set
	for every item phototime in the provided sorted set
	{
		*Add Photo Time* phototime
	}

	set this's start time to the given start time
	set this's start time to the given start time
}


*There will be a builder 
-Input: a new sorted set
	   a value for Starting Time
       a value for Ending Time
{
	ensure inputs are not null

	return a new Photo Schedule object with the sorted set, 
	starting time, and ending time
}


*There will be a builder
-Input: an empty sorted set
	    a value for Starting Time
        a value for Ending Time
-Output: a Photo Schedule
{
	ensure inputs are not null

	return a new Photo Schedule object with a new, empty sorted set,
	starting time, and ending time
}


*Photo Schedule will have a getter for it's sorted set*


*Add Photo Time*
-Input: a Photo Time to add to the sorted set
-Output: a true false statement
This routine will add a new Photo Time into the sorted set
{
	ensure inputs are not null

	if the new Photo time has a start time and end time within the
	Photo Schedule's start and end time for lighting
	{
		Add the new Photo Time into this's sorted set
		return true
	}
	if not
	{
		return false
	}
}


*Remove Photo Time*
-Input: a Photo Time to remove from the sorted set
This routine will remove a Photo Time from the sorted set
{
	ensure inputs are not null

	remove the given Photo Time from this's sorted set
}


*Generate Schedule*
-Output: a list containing the Photo Times that are optimal throughout the day
This routine will generate the schedule of Photo Times to go to
{
	use the weighted job scheduling algorithm to get a list of Photo Times to 
	go to

	return the generated list of Photo Times
}
